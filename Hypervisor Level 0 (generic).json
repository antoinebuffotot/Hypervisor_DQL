{"version":17,"variables":[],"tiles":{"0":{"type":"markdown","title":"","content":"# Overall Application"},"1":{"type":"data","title":"Level 0 - MyApp1","query":"fetch dt.entity.host | filter osType != \"ZOS\"\n| lookup [\n    timeseries {cpu=avg(dt.host.cpu.usage), mem=avg(dt.host.memory.usage)}, by:{dt.entity.host}\n    | fields timeframe,interval, entityName(dt.entity.host), dt.entity.host,  cpu, mem\n], sourceField: id, lookupField:dt.entity.host\n| summarize {cpu.max = max(arrayMax(lookup.cpu)), cpu.avg = avg(arrayAvg(lookup.cpu)),mem.max = max(arrayMax(lookup.mem)), mem.avg = avg(arrayAvg(lookup.mem))}, by:{id, entity.name}\n| fields entity.name, id,cpu.avg, cpu.max, mem.max, mem.avg \n| fieldsAdd status_cpu=if(cpu.max>95, \"游댮\", else:if(cpu.max>50, \"游리\", else:\"游릭\") ), status_mem=if(mem.max>95, \"游댮\", else:if(mem.max>50, \"游리\", else:\"游릭\") ) \n| fieldsRemove cpu.avg,cpu.max,mem.max,mem.avg\n| fieldsAdd status_host= if (status_cpu==\"游댮\" or status_mem==\"游댮\", \"游댮\", else: if(status_cpu==\"游리\" or status_mem==\"游리\",\"游리\", else:\"游릭\"))\n| sort status_cpu,status_mem asc\n|fieldsRemove status_cpu,status_mem | fieldsRename status=status_host\n| append [\n////////////////////\nfetch dt.entity.service\n| lookup [\ntimeseries {\n    operand1 = sum(dt.service.request.failure_count),\n    operand2 = sum(dt.service.request.count)\n  }, by:{dt.entity.service}, bins: 60, nonempty: true\n  | fieldsAdd failureRate_timeseries = operand1[] / operand2[]  * 100\n  | fieldsRemove operand1, operand2 ], sourceField: id, lookupField:dt.entity.service\n| summarize {failurerate_avg.avg = avg(arrayAvg(lookup.failureRate_timeseries))}, by:{id, entity.name}\n| fields entity.name, id,failurerate_avg.avg=100-failurerate_avg.avg\n| fieldsAdd status_failurerate=if(failurerate_avg.avg>98, \"游릭\", else:if(failurerate_avg.avg>90, \"游리\", else:\"游댮\") ) \n| fieldsRemove failurerate_avg.avg\n| fieldsAdd status_service= if (status_failurerate==\"游댮\" , \"游댮\", else: if(status_failurerate==\"游리\", \"游리\", else:\"游릭\"))\n| sort status_service asc\n|fieldsRemove status_failurerate | fieldsRename status=status_service\n]\n\n\n///////////////////////\n| append [\nfetch dt.entity.host | filter osType != \"ZOS\"\n| lookup [\n timeseries avail=max(dt.host.availability, rollup:sum) , by:{availability.state,dt.entity.host} | fieldsAdd intervalToMinutes = toLong(interval)/60000000000 | fieldsAdd m1 = if(avail[]>intervalToMinutes, intervalToMinutes, else: avail[]) | fieldsAdd avail=(avail[]/intervalToMinutes)*100 | fieldsAdd metricName = \"up\"\n ], sourceField: id, lookupField:dt.entity.host\n| summarize {avail.max = max(arrayMax(lookup.avail)), avail.avg = avg(arrayAvg(lookup.avail))}, by:{id, entity.name}\n| fields entity.name, id,avail.avg, avail.max\n| fieldsAdd status_avail=if(avail.max>98, \"游릭\", else:if(avail.max>90, \"游리\", else:\"游댮\") )\n| fieldsRemove avail.max,avail.avg\n| fieldsAdd status_host= if (status_avail==\"游댮\" , \"游댮\", else: if(status_avail==\"游리\" ,\"游리\", else:\"游릭\"))\n| sort status_avail asc\n|fieldsRemove status_avail | fieldsRename status=status_host\n]\n| append [\n///////////////////\nfetch dt.entity.process_group_instance\n| lookup [\n timeseries avail=max(dt.process.availability, rollup:sum) , by:{availability.state,dt.entity.process_group_instance} | fieldsAdd intervalToMinutes = toLong(interval)/60000000000 | fieldsAdd m1 = if(avail[]>intervalToMinutes, intervalToMinutes, else: avail[]) | fieldsAdd avail=(avail[]/intervalToMinutes)*100 | fieldsAdd metricName = \"up\"\n ], sourceField: id, lookupField:dt.entity.process_group_instance\n |filterOut isNull( lookup.dt.entity.process_group_instance)\n| summarize {avail.max = max(arrayMax(lookup.avail)), avail.avg = avg(arrayAvg(lookup.avail))}, by:{id, entity.name}\n| fields entity.name, id,avail.avg, avail.max\n| fieldsAdd status_avail=if(avail.max>98, \"游릭\", else:if(avail.max>90, \"游리\", else:\"游댮\") )\n| fieldsRemove avail.max,avail.avg\n| fieldsAdd status_process= if (status_avail==\"游댮\" , \"游댮\", else: if(status_avail==\"游리\" ,\"游리\", else:\"游릭\"))\n| sort status_avail asc\n|fieldsRemove status_avail | fieldsRename status=status_process]\n\n| append [\n/////////////////\nfetch dt.entity.http_check\n| lookup[\n    fetch events\n    | filter event.kind == \"DAVIS_PROBLEM\"\n    | expand affected_entity_ids\n    | sort timestamp desc\n    | dedup   affected_entity_ids, display_id, event.id\n    | sort timestamp desc\n    | dedup   affected_entity_ids, event.status\n    | fields affected_entity_ids,  status=if(event.status ==\"ACTIVE\",\"游댮\", else: \"游리\"), display_id, event.id\n    ], sourceField:id, lookupField:affected_entity_ids\n| fieldsAdd status_synthetic=if(isNotNull(lookup.status),lookup.status, else: \"游릭\" )\n| fieldsAdd event.id=lookup.event.id\n| fields entity.name, id, status_synthetic\n| sort status_synthetic\n| fieldsRename status=status_synthetic]\n\n| sort status\n| fieldsSummary status \n| expand values, limit: 3  | fieldsFlatten values\n| sort values.value asc\n| limit 1\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"honeycomb","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["field","values.value"],"categoryAxisLabel":"field,values.value","valueAxis":["rawCount","count","values.count"],"valueAxisLabel":"rawCount,count,values.count","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"field","prefixIcon":"","recordField":"field","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["field","values.value"],"dataMappings":{"value":"values.value"},"truncationMode":"middle","colorMode":"custom-colors","colorPalette":"categorical","customColors":[{"id":0,"value":"游릭","comparator":"=","color":"#00D26A"},{"id":1081740.6999999993,"value":"游리","comparator":"=","color":"#FCD53F"},{"id":1082285,"value":"游댮","comparator":"=","color":"#F8312F"}],"min":null,"max":null},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"rawCount","rangeAxis":""},{"valueAxis":"count","rangeAxis":""},{"valueAxis":"values.count","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["field","values.value"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"segments":{"tileSegmentsEnabled":true,"tileSegments":[{"id":"B2xYFy3LD2G","variables":[{"name":"tags","values":["app:crm"]}]}]}},"2":{"type":"data","title":"Level 0 - MyApp2","query":"fetch dt.entity.host | filter osType != \"ZOS\"\n| lookup [\n    timeseries {cpu=avg(dt.host.cpu.usage), mem=avg(dt.host.memory.usage)}, by:{dt.entity.host}\n    | fields timeframe,interval, entityName(dt.entity.host), dt.entity.host,  cpu, mem\n], sourceField: id, lookupField:dt.entity.host\n| summarize {cpu.max = max(arrayMax(lookup.cpu)), cpu.avg = avg(arrayAvg(lookup.cpu)),mem.max = max(arrayMax(lookup.mem)), mem.avg = avg(arrayAvg(lookup.mem))}, by:{id, entity.name}\n| fields entity.name, id,cpu.avg, cpu.max, mem.max, mem.avg \n| fieldsAdd status_cpu=if(cpu.max>95, \"游댮\", else:if(cpu.max>50, \"游리\", else:\"游릭\") ), status_mem=if(mem.max>95, \"游댮\", else:if(mem.max>50, \"游리\", else:\"游릭\") ) \n| fieldsRemove cpu.avg,cpu.max,mem.max,mem.avg\n| fieldsAdd status_host= if (status_cpu==\"游댮\" or status_mem==\"游댮\", \"游댮\", else: if(status_cpu==\"游리\" or status_mem==\"游리\",\"游리\", else:\"游릭\"))\n| sort status_cpu,status_mem asc\n|fieldsRemove status_cpu,status_mem | fieldsRename status=status_host\n| append [\n////////////////////\nfetch dt.entity.service\n| lookup [\ntimeseries {\n    operand1 = sum(dt.service.request.failure_count),\n    operand2 = sum(dt.service.request.count)\n  }, by:{dt.entity.service}, bins: 60, nonempty: true\n  | fieldsAdd failureRate_timeseries = operand1[] / operand2[]  * 100\n  | fieldsRemove operand1, operand2 ], sourceField: id, lookupField:dt.entity.service\n| summarize {failurerate_avg.avg = avg(arrayAvg(lookup.failureRate_timeseries))}, by:{id, entity.name}\n| fields entity.name, id,failurerate_avg.avg=100-failurerate_avg.avg\n| fieldsAdd status_failurerate=if(failurerate_avg.avg>98, \"游릭\", else:if(failurerate_avg.avg>90, \"游리\", else:\"游댮\") ) \n| fieldsRemove failurerate_avg.avg\n| fieldsAdd status_service= if (status_failurerate==\"游댮\" , \"游댮\", else: if(status_failurerate==\"游리\", \"游리\", else:\"游릭\"))\n| sort status_service asc\n|fieldsRemove status_failurerate | fieldsRename status=status_service\n]\n\n\n///////////////////////\n| append [\nfetch dt.entity.host | filter osType != \"ZOS\"\n| lookup [\n timeseries avail=max(dt.host.availability, rollup:sum) , by:{availability.state,dt.entity.host} | fieldsAdd intervalToMinutes = toLong(interval)/60000000000 | fieldsAdd m1 = if(avail[]>intervalToMinutes, intervalToMinutes, else: avail[]) | fieldsAdd avail=(avail[]/intervalToMinutes)*100 | fieldsAdd metricName = \"up\"\n ], sourceField: id, lookupField:dt.entity.host\n| summarize {avail.max = max(arrayMax(lookup.avail)), avail.avg = avg(arrayAvg(lookup.avail))}, by:{id, entity.name}\n| fields entity.name, id,avail.avg, avail.max\n| fieldsAdd status_avail=if(avail.max>98, \"游릭\", else:if(avail.max>90, \"游리\", else:\"游댮\") )\n| fieldsRemove avail.max,avail.avg\n| fieldsAdd status_host= if (status_avail==\"游댮\" , \"游댮\", else: if(status_avail==\"游리\" ,\"游리\", else:\"游릭\"))\n| sort status_avail asc\n|fieldsRemove status_avail | fieldsRename status=status_host\n]\n| append [\n///////////////////\nfetch dt.entity.process_group_instance\n| lookup [\n timeseries avail=max(dt.process.availability, rollup:sum) , by:{availability.state,dt.entity.process_group_instance} | fieldsAdd intervalToMinutes = toLong(interval)/60000000000 | fieldsAdd m1 = if(avail[]>intervalToMinutes, intervalToMinutes, else: avail[]) | fieldsAdd avail=(avail[]/intervalToMinutes)*100 | fieldsAdd metricName = \"up\"\n ], sourceField: id, lookupField:dt.entity.process_group_instance\n |filterOut isNull( lookup.dt.entity.process_group_instance)\n| summarize {avail.max = max(arrayMax(lookup.avail)), avail.avg = avg(arrayAvg(lookup.avail))}, by:{id, entity.name}\n| fields entity.name, id,avail.avg, avail.max\n| fieldsAdd status_avail=if(avail.max>98, \"游릭\", else:if(avail.max>90, \"游리\", else:\"游댮\") )\n| fieldsRemove avail.max,avail.avg\n| fieldsAdd status_process= if (status_avail==\"游댮\" , \"游댮\", else: if(status_avail==\"游리\" ,\"游리\", else:\"游릭\"))\n| sort status_avail asc\n|fieldsRemove status_avail | fieldsRename status=status_process]\n\n| append [\n/////////////////\nfetch dt.entity.http_check\n| lookup[\n    fetch events\n    | filter event.kind == \"DAVIS_PROBLEM\"\n    | expand affected_entity_ids\n    | sort timestamp desc\n    | dedup   affected_entity_ids, display_id, event.id\n    | sort timestamp desc\n    | dedup   affected_entity_ids, event.status\n    | fields affected_entity_ids,  status=if(event.status ==\"ACTIVE\",\"游댮\", else: \"游리\"), display_id, event.id\n    ], sourceField:id, lookupField:affected_entity_ids\n| fieldsAdd status_synthetic=if(isNotNull(lookup.status),lookup.status, else: \"游릭\" )\n| fieldsAdd event.id=lookup.event.id\n| fields entity.name, id, status_synthetic\n| sort status_synthetic\n| fieldsRename status=status_synthetic]\n\n| sort status\n| fieldsSummary status \n| expand values, limit: 3  | fieldsFlatten values\n| sort values.value asc\n| limit 1\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"honeycomb","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["field","values.value"],"categoryAxisLabel":"field,values.value","valueAxis":["rawCount","count","values.count"],"valueAxisLabel":"rawCount,count,values.count","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"field","prefixIcon":"","recordField":"field","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["field","values.value"],"dataMappings":{"value":"values.value"},"truncationMode":"middle","colorMode":"custom-colors","colorPalette":"categorical","customColors":[{"id":0,"value":"游릭","comparator":"=","color":"#00D26A"},{"id":1090956.8000000007,"value":"游리","comparator":"=","color":"#FCD53F"},{"id":1091460.6999999993,"value":"游댮","comparator":"=","color":"#F8312F"}],"min":null,"max":null},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"rawCount","rangeAxis":""},{"valueAxis":"count","rangeAxis":""},{"valueAxis":"values.count","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["field","values.value"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"segments":{"tileSegmentsEnabled":true,"tileSegments":[{"id":"B2xYFy3LD2G","variables":[{"name":"tags","values":["app:espacemembre"]}]}]}},"3":{"type":"data","title":"Level 0 - MyApp3","query":"fetch dt.entity.host | filter osType != \"ZOS\"\n| lookup [\n    timeseries {cpu=avg(dt.host.cpu.usage), mem=avg(dt.host.memory.usage)}, by:{dt.entity.host}\n    | fields timeframe,interval, entityName(dt.entity.host), dt.entity.host,  cpu, mem\n], sourceField: id, lookupField:dt.entity.host\n| summarize {cpu.max = max(arrayMax(lookup.cpu)), cpu.avg = avg(arrayAvg(lookup.cpu)),mem.max = max(arrayMax(lookup.mem)), mem.avg = avg(arrayAvg(lookup.mem))}, by:{id, entity.name}\n| fields entity.name, id,cpu.avg, cpu.max, mem.max, mem.avg \n| fieldsAdd status_cpu=if(cpu.max>95, \"游댮\", else:if(cpu.max>50, \"游리\", else:\"游릭\") ), status_mem=if(mem.max>95, \"游댮\", else:if(mem.max>50, \"游리\", else:\"游릭\") ) \n| fieldsRemove cpu.avg,cpu.max,mem.max,mem.avg\n| fieldsAdd status_host= if (status_cpu==\"游댮\" or status_mem==\"游댮\", \"游댮\", else: if(status_cpu==\"游리\" or status_mem==\"游리\",\"游리\", else:\"游릭\"))\n| sort status_cpu,status_mem asc\n|fieldsRemove status_cpu,status_mem | fieldsRename status=status_host\n| append [\n////////////////////\nfetch dt.entity.service\n| lookup [\ntimeseries {\n    operand1 = sum(dt.service.request.failure_count),\n    operand2 = sum(dt.service.request.count)\n  }, by:{dt.entity.service}, bins: 60, nonempty: true\n  | fieldsAdd failureRate_timeseries = operand1[] / operand2[]  * 100\n  | fieldsRemove operand1, operand2 ], sourceField: id, lookupField:dt.entity.service\n| summarize {failurerate_avg.avg = avg(arrayAvg(lookup.failureRate_timeseries))}, by:{id, entity.name}\n| fields entity.name, id,failurerate_avg.avg=100-failurerate_avg.avg\n| fieldsAdd status_failurerate=if(failurerate_avg.avg>98, \"游릭\", else:if(failurerate_avg.avg>90, \"游리\", else:\"游댮\") ) \n| fieldsRemove failurerate_avg.avg\n| fieldsAdd status_service= if (status_failurerate==\"游댮\" , \"游댮\", else: if(status_failurerate==\"游리\", \"游리\", else:\"游릭\"))\n| sort status_service asc\n|fieldsRemove status_failurerate | fieldsRename status=status_service\n]\n\n\n///////////////////////\n| append [\nfetch dt.entity.host | filter osType != \"ZOS\"\n| lookup [\n timeseries avail=max(dt.host.availability, rollup:sum) , by:{availability.state,dt.entity.host} | fieldsAdd intervalToMinutes = toLong(interval)/60000000000 | fieldsAdd m1 = if(avail[]>intervalToMinutes, intervalToMinutes, else: avail[]) | fieldsAdd avail=(avail[]/intervalToMinutes)*100 | fieldsAdd metricName = \"up\"\n ], sourceField: id, lookupField:dt.entity.host\n| summarize {avail.max = max(arrayMax(lookup.avail)), avail.avg = avg(arrayAvg(lookup.avail))}, by:{id, entity.name}\n| fields entity.name, id,avail.avg, avail.max\n| fieldsAdd status_avail=if(avail.max>98, \"游릭\", else:if(avail.max>90, \"游리\", else:\"游댮\") )\n| fieldsRemove avail.max,avail.avg\n| fieldsAdd status_host= if (status_avail==\"游댮\" , \"游댮\", else: if(status_avail==\"游리\" ,\"游리\", else:\"游릭\"))\n| sort status_avail asc\n|fieldsRemove status_avail | fieldsRename status=status_host\n]\n| append [\n///////////////////\nfetch dt.entity.process_group_instance\n| lookup [\n timeseries avail=max(dt.process.availability, rollup:sum) , by:{availability.state,dt.entity.process_group_instance} | fieldsAdd intervalToMinutes = toLong(interval)/60000000000 | fieldsAdd m1 = if(avail[]>intervalToMinutes, intervalToMinutes, else: avail[]) | fieldsAdd avail=(avail[]/intervalToMinutes)*100 | fieldsAdd metricName = \"up\"\n ], sourceField: id, lookupField:dt.entity.process_group_instance\n |filterOut isNull( lookup.dt.entity.process_group_instance)\n| summarize {avail.max = max(arrayMax(lookup.avail)), avail.avg = avg(arrayAvg(lookup.avail))}, by:{id, entity.name}\n| fields entity.name, id,avail.avg, avail.max\n| fieldsAdd status_avail=if(avail.max>98, \"游릭\", else:if(avail.max>90, \"游리\", else:\"游댮\") )\n| fieldsRemove avail.max,avail.avg\n| fieldsAdd status_process= if (status_avail==\"游댮\" , \"游댮\", else: if(status_avail==\"游리\" ,\"游리\", else:\"游릭\"))\n| sort status_avail asc\n|fieldsRemove status_avail | fieldsRename status=status_process]\n\n| append [\n/////////////////\nfetch dt.entity.http_check\n| lookup[\n    fetch events\n    | filter event.kind == \"DAVIS_PROBLEM\"\n    | expand affected_entity_ids\n    | sort timestamp desc\n    | dedup   affected_entity_ids, display_id, event.id\n    | sort timestamp desc\n    | dedup   affected_entity_ids, event.status\n    | fields affected_entity_ids,  status=if(event.status ==\"ACTIVE\",\"游댮\", else: \"游리\"), display_id, event.id\n    ], sourceField:id, lookupField:affected_entity_ids\n| fieldsAdd status_synthetic=if(isNotNull(lookup.status),lookup.status, else: \"游릭\" )\n| fieldsAdd event.id=lookup.event.id\n| fields entity.name, id, status_synthetic\n| sort status_synthetic\n| fieldsRename status=status_synthetic]\n\n| sort status\n| fieldsSummary status \n| expand values, limit: 3  | fieldsFlatten values\n| sort values.value asc\n| limit 1\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"honeycomb","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"horizontal","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["field","values.value"],"categoryAxisLabel":"field,values.value","valueAxis":["rawCount","count","values.count"],"valueAxisLabel":"rawCount,count,values.count","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"field","prefixIcon":"","recordField":"field","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["field","values.value"],"dataMappings":{"value":"values.value"},"truncationMode":"middle","colorMode":"custom-colors","colorPalette":"categorical","customColors":[{"id":0,"value":"游릭","comparator":"=","color":"#00D26A"},{"id":1099757.5,"value":"游리","comparator":"=","color":"#FCD53F"},{"id":1100341.6999999993,"value":"游댮","comparator":"=","color":"#F8312F"}],"min":null,"max":null},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"rawCount","rangeAxis":""},{"valueAxis":"count","rangeAxis":""},{"valueAxis":"values.count","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["field","values.value"]},"label":{"showLabel":false},"icon":{"showIcon":false,"icon":""},"valueBoundaries":{"min":"auto","max":"auto"},"autoSelectVisualization":false},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"segments":{"tileSegmentsEnabled":true,"tileSegments":[{"id":"B2xYFy3LD2G","variables":[{"name":"tags","values":["app:kiamo"]}]}]}},"4":{"type":"markdown","title":"","content":"[Link to Hypervisor Level 0 & 1 for MyApp1]()"},"5":{"type":"markdown","title":"","content":"[Link to Hypervisor Level 0 & 1 for MyApp2]()"},"6":{"type":"markdown","title":"","content":"[Link to Hypervisor Level 0 & 1 for MyApp3]()"},"7":{"type":"markdown","title":"","content":"!! Mandatory modification !! :\n1. Add or remove the Level 0 tiles for every applications you want to add and adapt the segment filtering and the title \n2. Modify the link to Level 0 & 1 dashboards"}},"layouts":{"0":{"x":0,"y":0,"w":21,"h":1},"1":{"x":0,"y":1,"w":5,"h":4},"2":{"x":5,"y":1,"w":5,"h":4},"3":{"x":10,"y":1,"w":5,"h":4},"4":{"x":0,"y":5,"w":5,"h":1},"5":{"x":5,"y":5,"w":5,"h":1},"6":{"x":10,"y":5,"w":5,"h":1},"7":{"x":0,"y":6,"w":21,"h":3}},"importedWithCode":false,"settings":{"gridLayout":{"mode":"responsive"}}}